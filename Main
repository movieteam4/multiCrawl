import threading
import pandas as pd
from flask_mail import Mail, Message
from flask import Flask
import traceback
import io
import mysql.connector
import lxml
import re
import datetime
from datetime import datetime
app =Flask(__name__)
app.config['MAIL_SERVER']='smtp.gmail.com'
app.config['MAIL_PORT'] = 465
app.config['MAIL_USERNAME'] = 'ian27368885@gmail.com'
app.config['MAIL_PASSWORD'] = 'zfpqrdqjekvgwpuh'
app.config['MAIL_USE_TLS'] = False
app.config['MAIL_USE_SSL'] = True
mail = Mail(app)
db_config = {
    'host': 'u3r5w4ayhxzdrw87.cbetxkdyhwsb.us-east-1.rds.amazonaws.com',         # 資料庫伺服器地址 (可以是 IP 或域名)
    'user': 'dhv81sqnky35oozt',     # 資料庫使用者名稱
    'password': 'rrdv8ehsrp8pdzqn', # 資料庫密碼
    'database': 'xltc236odfo1enc9',  # 要使用的資料庫名稱
}
connection = mysql.connector.connect(**db_config)
if connection.is_connected():
    print("成功連接到 MariaDB 資料庫")
print(pd.__version__)
print(lxml.__version__) 
cursor=connection.cursor()
x=''
x1=''
y=''
y1=''
z=''
z1=''
a=''
a1=''
b=''
b1=''
c=''
c1=''
c2='no data'
c3='no data'
# 美麗新影城資料
def miranew():
    global x,x1
    from miranew_crawl import miranew_data,miranew_error
    x= miranew_data
    x1=miranew_error
    print('美麗新城 done')
# 秀泰資料
def show_time():
    global y,y1
    from show_time_crawl import show_time_data,show_time_error
    y= show_time_data
    y1=show_time_error
    print('秀泰 done')
# 大直美麗華資料
def mira():
    global z,z1
    from mira_movie_crawl import mira_data,mira_error
    z= mira_data
    z1=mira_error
    print('美麗華 done')
#威秀資料
def vieshow():
    global a,a1
    from vienshow_crawl import vienson_data,vien_error
    a=vienson_data
    a1=vien_error
    print('威秀 done')
# 國賓資料
def amba():
    global b,b1
    from ambassedor import ambassedor_data,anbassedor_error
    b=ambassedor_data
    b1=anbassedor_error
    print('國賓 done')
# 星光資料
def shin():
    global c,c1,c2,c3
    from shin_kong import data , shin_error
    c=data
    c1=shin_error
    print('新光 done')
job1=threading.Thread(target=show_time)
job2=threading.Thread(target=miranew)
job3=threading.Thread(target=mira)
job4=threading.Thread(target=vieshow)
job5=threading.Thread(target=amba)
job6=threading.Thread(target=shin)
if __name__ == "__main__":
    job1.start()
    # job2.start()
    job3.start()
    job4.start()
    job5.start()
    # job6.start()
    job1.join()
    job2.start()
    job2.join()
    job6.start()
    job3.join()
    job4.join()
    job5.join()
    job6.join()
    if type(x) == str:
        print('美麗新城 炸裂!')
    if type(y) == str:
        print('秀泰 炸裂!')
    if type(z) == str:
        print('美麗華 炸裂!')
    if type(a) == str:
        print('威秀 炸裂!')
    if type(b) == str:
        print('國賓 炸裂!')
    if type(c) == str:
        print('新光 炸裂!')
    to_be_concat=[]
    for i in [x,y,z,a,b,c]:
        if type(i) == str:
            continue
        to_be_concat.append(i)
    def remove_space(x):
        full_width_punctuations = {
        '。': '.',  # 全形句號 -> 半形句號
        '，': ',',  # 全形逗號 -> 半形逗號
        '！': '!',  # 全形驚嘆號 -> 半形驚嘆號
        '？': '?',  # 全形問號 -> 半形問號
        '：': ':',  # 全形冒號 -> 半形冒號
        '；': ';',  # 全形分號 -> 半形分號
        '（': '(',  # 全形左括號 -> 半形左括號
        '）': ')',  # 全形右括號 -> 半形右括號
        '【': '[',  # 全形左中括號 -> 半形左中括號
        '】': ']',  # 全形右中括號 -> 半形右中括號
        '《': '<',  # 全形左尖括號 -> 半形左尖括號
        '》': '>',  # 全形右尖括號 -> 半形右尖括號
        '「': '"',  # 全形左引號 -> 半形引號
        '」': '"',  # 全形右引號 -> 半形引號
        '、': ',',  # 全形頓號 -> 半形逗號
    }
        x=x.replace(' ','')
        translation_table = str.maketrans(full_width_punctuations)
        x=x.translate(translation_table)
        return x

    final_data=pd.concat(to_be_concat)
    count=len(final_data)
    final_data_html=final_data.to_html(classes='table table-striped', index=False).replace(r"'",'’')
    cursor.execute(f'''insert into movies_html (html) values ('{final_data_html}') ''')
    connection.commit()
    print('未整裡資料,輸入完成')
    cursor.execute('SELECT * FROM movies_html ORDER BY id DESC LIMIT 1')            
    result=cursor.fetchall()
    res=result[0][1]
    final_data=pd.read_html(res)[0]
    final_data['中文片名']=final_data['中文片名'].apply(remove_space)
    cinema_to_be_fill=final_data.groupby('電影院名稱').count().index
    columns_to_be_filled=['導演','演員','類型','宣傳照']
    for cinema in cinema_to_be_fill:
        to_fill=final_data[final_data['電影院名稱']==cinema]
        ch_names=to_fill.groupby('中文片名').count().index
        for ch_name in ch_names:
            for col in columns_to_be_filled:
                final_data[col][(final_data[col].isna()) & (final_data['中文片名'].str.contains(ch_name,case=False))]=final_data[col][(final_data[col].isna()) & (final_data['中文片名'].str.contains(ch_name,case=False))].fillna(value=to_fill[[col,'中文片名']][to_fill['中文片名']==ch_name].iloc[0][col])  
    from unify_date import unify_date
    final_data['日期']=final_data['日期'].apply(unify_date)
    final_data_html=final_data.to_html(classes='table table-striped', index=False).replace(r"'",'’')
    cursor.execute(f'''insert into movies_html (html) values ('{final_data_html}') ''')
    connection.commit()
    print('資料輸入完成')
with app.app_context():
    mail = Mail(app)
    msg = Message('多工測試報告', sender = 'ian27368885@gmail.com', recipients = ['ian27368885@gmail.com','movierecommendations4@gmail.com'])
    msg.body = f'總共{count}筆資料\n{x1}\n{y1}\n{z1}\n{a1}\n{b1}\n{c1}'
    mail.send(msg)
    mail = Mail(app)
    msg = Message('電影列表', sender = 'ian27368885@gmail.com', recipients = ['ian27368885@gmail.com','movierecommendations4@gmail.com'])
    msg.html = final_data_html
    mail.send(msg)
